use dsync::{GenerationConfig, TableOptions};
use std::path::PathBuf;

pub fn main() -> dsync::Result<()> {
	let dir = env!("CARGO_MANIFEST_DIR");
	let table_options = TableOptions::default()
		.use_async()
		.single_model_file()
		.autogenerated_columns(vec!["created_at", "updated_at"]);

	dsync::generate_files(
		&PathBuf::from_iter([dir, "src/schema.rs"]),
		&PathBuf::from_iter([dir, "src/models"]),
		GenerationConfig {
			default_table_options: table_options,
			connection_type: String::from("rocket_db_pools::Connection<crate::DB>"),
			schema_path: format!("{dir}/src/schema.rs"),
			model_path: format!("{dir}/src/models"),
			table_options: Default::default(),
			once_common_structs: false,
			once_connection_type: false,
			readonly_prefixes: Default::default(),
			readonly_suffixes: Default::default(),
			// dsync -i backend/src/schema.rs -o backend/src/models --connection-type="rocket_db_pools::Connection<crate::DB>"
		},
	)?;
	Ok(())
}
